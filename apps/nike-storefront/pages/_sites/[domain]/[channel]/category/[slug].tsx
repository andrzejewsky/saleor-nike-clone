import type { NextPage, GetStaticProps, GetStaticPaths, InferGetStaticPropsType } from "next";
import type { ChannelContext } from "@/lib/appContext";
import {
  CategoryBySlugQuery,
  ProductCollectionQuery,
  useFilteringAttributesQuery,
} from "@saleor-api";
import Head from "next/head";
import {
  AttributeFilters,
  AttributeFiltersSkeleton,
  CategoryFilters,
  ProductResults,
} from "components/Search";
import { loadCategoryBySlug, loadProductsByCatId } from "@/lib/categoryPage";
import { useShopInfo } from "@/lib/hooks/useShopInfo";

interface CategoryPageProps {
  category: CategoryBySlugQuery["category"];
  products?: ProductCollectionQuery["products"];
}

interface CategoryPageContext extends ChannelContext {
  slug: string;
}

export const getStaticPaths: GetStaticPaths = () => ({
  paths: [],
  fallback: true,
});

export const getStaticProps: GetStaticProps<CategoryPageProps, CategoryPageContext> = async (
  context
) => {
  if (!context.params) {
    return { notFound: true };
  }

  const category = await loadCategoryBySlug(context, context.params.slug);

  if (!category) {
    return { notFound: true };
  }

  const products = await loadProductsByCatId(context, category.id);

  if (!products) {
    return {
      props: { category },
    };
  }

  return {
    props: { category, products },
  };
};

const Category: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = ({
  category,
  products,
}) => {
  const { channel, enumedLocale } = useShopInfo();

  const attributes = useFilteringAttributesQuery({
    variables: {
      filter: { inCategory: category?.id },
      channel,
      locale: enumedLocale,
    },
    skip: !category,
  });

  if (!category) return null;

  return (
    <div className="max-w-[1920px] mx-auto">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="px-16">
        <h1 className="text-2xl font-medium py-6">{category.name}</h1>
        <div className="flex flex-nowrap space-x-7">
          <div className="w-48 shrink-0">
            <CategoryFilters category={category} />

            {attributes.loading ? (
              <AttributeFiltersSkeleton />
            ) : (
              <AttributeFilters attributes={attributes.data?.attributes} />
            )}
          </div>
          <div className="grow">
            <ProductResults products={products} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Category;
