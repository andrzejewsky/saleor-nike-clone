import {
  AttributeFilters,
  AttributeFiltersSkeleton,
  CategoryFilters,
  CategoryFiltersSkeleton,
  ProductResults,
  ProductResultsSkeleton,
  useFilterState,
} from "@/components/Search";
import { useShopInfo } from "@/lib/hooks/useShopInfo";
import {
  useCategoryBySlugQuery,
  useFilteringAttributesQuery,
  useProductCollectionQuery,
} from "@saleor-api";
import Head from "next/head";
import { useRouter } from "next/router";
import type { NextPage } from "next";

const Search: NextPage = () => {
  const router = useRouter();
  const categorySlug = router.query.slug as string;
  const { channel, enumedLocale } = useShopInfo();
  const { filter } = useFilterState();

  const category = useCategoryBySlugQuery({
    variables: {
      slug: categorySlug,
      locale: enumedLocale,
    },
  });

  const attributes = useFilteringAttributesQuery({
    variables: {
      filter: { inCategory: category.data?.category?.id },
      channel,
      locale: enumedLocale,
    },
    skip: category.loading,
  });

  const products = useProductCollectionQuery({
    variables: {
      filter: {
        categories: [category.data?.category?.id!],
        attributes: filter,
      },
      first: 20,
      channel,
      locale: enumedLocale,
    },
    skip: category.loading,
  });

  const attributesPending = category.loading || attributes.loading;
  const productsPending = category.loading || products.loading;

  return (
    <div className="max-w-[1920px] mx-auto">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="px-16">
        <h1 className="text-2xl font-medium py-6">{category.data?.category?.name}</h1>
        <div className="flex flex-nowrap space-x-7">
          <div className="w-48 shrink-0">
            {category.loading ? (
              <CategoryFiltersSkeleton />
            ) : (
              <CategoryFilters category={category.data?.category} />
            )}

            {attributesPending ? (
              <AttributeFiltersSkeleton />
            ) : (
              <AttributeFilters attributes={attributes.data?.attributes} />
            )}
          </div>
          <div className="grow">
            {productsPending ? (
              <ProductResultsSkeleton />
            ) : (
              <ProductResults products={products.data?.products} />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Search;
