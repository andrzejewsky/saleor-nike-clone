import type { NextPage, GetStaticProps, GetStaticPaths, InferGetStaticPropsType } from "next";
import type { ChannelContext } from "@/lib/appContext";
import {
  ProductBySlugDocument,
  ProductBySlugQuery,
  ProductBySlugQueryVariables,
  ProductVariant,
} from "@saleor-api";
import Head from "next/head";
import apolloClient from "@/lib/graphql";
import { contextToRegionQuery } from "@/lib/regions";
import { useState } from "react";
import Image from "next/image";
import { ProductPrice, VariantPrice } from "@/components/ProductPrice";
import clsx from "clsx";
import { useAddItem } from "@/lib/hooks/useAddItem";
import { Heading } from "@/components/Heading";
import { Clips } from "@/components/Clips";

interface ProductPageProps {
  product: ProductBySlugQuery["product"];
}

interface ProductPageContext extends ChannelContext {
  slug: string;
}

export const getStaticPaths: GetStaticPaths = () => ({
  paths: [],
  fallback: "blocking",
});

export const getStaticProps: GetStaticProps<ProductPageProps, ProductPageContext> = async (
  context
) => {
  const { channel, locale } = contextToRegionQuery(context);

  const response = await apolloClient.query<ProductBySlugQuery, ProductBySlugQueryVariables>({
    query: ProductBySlugDocument,
    variables: {
      slug: context.params?.slug!,
      channel,
      locale,
    },
  });

  return {
    props: {
      product: response.data.product,
    },
  };
};

const Product: NextPage<InferGetStaticPropsType<typeof getStaticProps>> = ({ product }) => {
  const [variant, setVariant] = useState(product?.defaultVariant);
  const { addLineItem, loading: addingItemPending } = useAddItem();

  return (
    <div className="max-w-[1400px] mx-auto mt-10">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="px-16 flex mb-80">
        <div className="grow flex flex-wrap">
          {variant?.media?.map((m) => (
            <div className="w-1/2 p-4" key={m.url}>
              <Image src={m.url} layout="responsive" width={500} height={500} alt="" />
            </div>
          ))}
        </div>
        <div className="shrink-0 w-80">
          <h2 className="text-3xl">{product?.name}</h2>

          <p className="my-3 pt-7">{product?.seoDescription}</p>

          <div className="text-lg font-bold mt-10 my-3">
            <VariantPrice variant={variant as ProductVariant} />
          </div>
          <div className="flex flex-wrap">
            {product?.variants?.map((v) => (
              <div className="w-1/2 p-1" key={v.id}>
                <button
                  onClick={() => setVariant(v)}
                  className={clsx("rounded border p-5 w-full", {
                    "border-slate-800": v.id === variant?.id,
                  })}
                >
                  {v.name}
                </button>
              </div>
            ))}
          </div>

          <button
            disabled={addingItemPending}
            onClick={() => addLineItem(variant?.id!)}
            className="rounded-full bg-zinc-800 disabled:bg-zinc-400 text-zinc-100 text-xl font-normal py-4 w-full mt-14"
          >
            Add to Bag
          </button>
        </div>
      </div>

      <Clips />

      <Heading
        headline="BY CHANGING NOTHING, SHE CHANGED EVERYTHING"
        description="Serenaâ€™s never been defined by just one thing. And only the Queen could inspire us to
        rally and rejoice at every deuce, design and dare-to-be-more moment. It began on the
        court and lives on with a new era of statement-makers."
        href="/"
        linkText="Explore the Collection"
      />
    </div>
  );
};

export default Product;
